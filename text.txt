const express = require('express')
require('dotenv').config();
const cors = require("cors");

// import middlewares
const cookieParser = require("cookie-parser");

//import routes
const AuthRoute = require('./Routes/Auth.Route.js');
const checkToken = require('./Middlewares/jwtVerify.Middlewares.js');

const app = express()

// Middleware 

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(checkToken("token"))

// app.use(cors({
//   origin: process.env.FRONTEND_URL, 
//   credentials: true,
//   methods: "GET, HEAD, PUT, PATCH, POST, DELETE",
//   allowedHeaders: "Content-Type, Authorization"
// }));
// app.options('*', cors({
//   origin: process.env.FRONTEND_URL,  // Your frontend domain for preflight requests
//   credentials: true
// }));
// app.use((req,res,next)=>{
//   console.log("in")
//   next()
// })

app.use('/api/v1/Auth',AuthRoute)

app.listen(7000, () => console.log('Server running on 7000'))

// filepath: c:\Users\Gaurav\Desktop\New folder\Connection.js
// supabaseClient.js
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

module.exports = supabase;

// filepath: c:\Users\Gaurav\Desktop\New folder\Routes\Auth.Route.js
const express = require("express");
const {signUpInstitute, loginInstitute, createAdmin, loginAdmin, alumniSignup, signinAlumni, signinStudent, signupStudent} = require('../Controllers/Auth.Controllers.js');
const restrictToInstitute = require("../Middlewares/onlyInstitute.Middlewares.js");

const router = express.Router();

router.post('/institute/signup',signUpInstitute)
router.post('/institute/signin',loginInstitute)
router.post('/institute/createAdmin',restrictToInstitute,createAdmin)
router.post('/institute/admin/signin',loginAdmin)

router.post('/user/alumni/signup',alumniSignup)
router.post('/user/alumni/signin',signinAlumni)
router.post('/user/student/signup',signupStudent)
router.post('/user/student/signin',signinStudent)

module.exports = router;

// filepath: c:\Users\Gaurav\Desktop\New folder\Middlewares\onlyInstitute.Middlewares.js
const apiError = require("../Services/apiError.Services.js");

async function restrictToInstitute(req, res, next) {
  try {
    if (!req.institute) {
      return res.status(403).json(
        new apiError(403, "Access Denied! Only Institute is allowed to access this route")
      );
    }
    next();
  } catch (error) {
    console.error("Error in restrictToInstitute middleware:", error);
    if (!res.headersSent) {
      return res.status(500).json(new apiError(500, "Server Error"));
    }
  }
}

module.exports = restrictToInstitute;

// filepath: c:\Users\Gaurav\Desktop\New folder\Services\apiError.Services.js
class apiError extends Error {
  constructor(statusCode, message = "Something went wrong",errors=[]) {
   super(message)
    this.statusCode=statusCode
    this.errors = errors
    this.message=message
    this.data=null
    this.success=false
   
  }
}

module.exports=apiError

// filepath: c:\Users\Gaurav\Desktop\New folder\Services\apiResponse.Services.js
class apiResponse {
  constructor(statusCode, message = "Success", data) {
    this.statusCode = statusCode
    this.message = message
    this.data = data
    this.success = true
  }

}

module.exports=apiResponse

// filepath: c:\Users\Gaurav\Desktop\New folder\Services\asyncHandler.Services.js
// asyncHandler.js
export const asyncHandler = (fn) => (req, res, next) => {
  Promise.resolve(fn(req, res, next)).catch(next);
};

// filepath: c:\Users\Gaurav\Desktop\New folder\Services\hashPassword.Services.js
const {createHmac, randomBytes}=require("crypto")

function haspassword(pass){
  const salt = randomBytes(16).toString()
  const hashedPassword = createHmac("sha256", salt).update(pass).digest("hex")

  return [salt,hashedPassword]
}

function verifyPassword(savedSalt,savedHash,passToVerify){
  const hashToVerify = createHmac("sha256", savedSalt).update(passToVerify).digest("hex")
  return savedHash === hashToVerify
}

module.exports={haspassword,verifyPassword}

// filepath: c:\Users\Gaurav\Desktop\New folder\Services\jwt.Services.js
const JWT = require("jsonwebtoken");
const secretKey = process.env.JWT_SECRETE_KEY;

// Create token for any role
function createToken(user) {
  let payload = {};

  switch (user.role) {
    case "Institute":
      payload = {
        id: user.id,
        name: user.name,
        role: user.role,
        email: user.email,
        website: user.website,
      };
      break;

    case "Student":
    case "Alumni":

    case "Admin":

    default:
      throw new Error("Invalid user role for JWT creation");
  }

  return JWT.sign(payload, secretKey, { expiresIn: "1d" });
}

// Validate token safely
function validateToken(token) {
  try {
    return JWT.verify(token, secretKey);
  } catch (err) {
    throw new Error("Invalid or expired token");
  }
}

module.exports = {
  createToken,
  validateToken,
};

// filepath: c:\Users\Gaurav\Desktop\New folder\README.md
# API Endpoints and Required Fields

| API Endpoint                                   | HTTP Method | Controller Function   | Required Fields (Request Body)                                                                 | Variable Names in Code                                         |
|------------------------------------------------|-------------|----------------------|-----------------------------------------------------------------------------------------------|----------------------------------------------------------------|
| /api/v1/Auth/institute/signup                  | POST        | signUpInstitute      | Name, email, location, pass                                                                   | Name, email, location, pass, website (optional)                |
| /api/v1/Auth/institute/signin                  | POST        | loginInstitute       | email, pass                                                                                   | email, pass                                                    |
| /api/v1/Auth/institute/createAdmin             | POST        | createAdmin          | username, email, pass, access                                                                 | username, email, pass, access                                  |
| /api/v1/Auth/institute/admin/signin            | POST        | loginAdmin           | email, pass                                                                                   | email, pass                                                    |
| /api/v1/Auth/user/alumni/signup                | POST        | alumniSignup         | fName, email, pass, currentCompany, Dob, gradYear, gender, instituteId                        | fName, lName (optional), email, pass, currentCompany, Dob, gradYear, gender, department (optional), linkedin (optional), instituteId |
| /api/v1/Auth/user/alumni/signin                | POST        | signinAlumni         | email, pass                                                                                   | email, pass                                                    |
| /api/v1/Auth/user/student/signup               | POST        | signupStudent        | fName, email, pass, Dob, currentYear, department, instituteId, gender                         | fName, lName (optional), email, pass, Dob, currentYear, department, instituteId, gender           |
| /api/v1/Auth/user/student/signin               | POST        | signinStudent        | email, pass                                                                                   | email, pass                                                    |

## Field Details

| Field Name      | Description                       | Required | Notes                                                      |
|-----------------|-----------------------------------|----------|------------------------------------------------------------|
| Name            | Institute name                    | Yes      |                                                            |
| email           | Email address                     | Yes      | Used for all user types                                    |
| location        | Institute location                | Yes      |                                                            |
| pass            | Password                          | Yes      | Will be hashed                                             |
| website         | Institute website                 | No       | Defaults to null                                           |
| username        | Admin username                    | Yes      | For admin creation                                         |
| access          | Admin access array                | Yes      | Example: ["manageUsers","viewReports"]                     |
| fName           | First name                        | Yes      | For alumni and students                                    |
| lName           | Last name                         | No       | Optional                                                   |
| currentCompany  | Alumni's current company          | Yes      | Alumni only                                                |
| Dob             | Date of birth                     | Yes      |                                                            |
| gradYear        | Graduation year                   | Yes      | Alumni only                                                |
| gender          | Gender                            | Yes      |                                                            |
| department      | Department                        | Yes/No   | Required for students, optional for alumni                 |
| linkedin        | LinkedIn profile                  | No       | Alumni only, optional                                      |
| instituteId     | Institute ID                      | Yes      | For alumni and students                                    |
| currentYear     | Current academic year             | Yes      | Students only                                              |

*All fields are expected in the JSON body of the POST request.*